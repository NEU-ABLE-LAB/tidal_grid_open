function [LCOE, LCOE_parts, LCOE_parts_names] = LCOE(obj, do_plot)
%LCOE Calculate levelized cost of energy of the system
%


%% Simple LCOE calculation
%TODO allow for non-hourly sampling

n_years = ((obj.TIME(end) - obj.TIME(1)) / (365*24));

% inverse of system demand (yr / kWh)
demand_inv = ( n_years / sum(obj.demand) );

% Generator costs ($ / yr)
gens_cost = cellfun(@(x)(x.cost_power) / ...
    (x.LIFETIME / n_years), obj.gens);
    
% Battery costs ($ / yr)
batts_cost_energy = cellfun(@(x)(x.cost_energy) * ...
    x.cycle_life_used , obj.batts);
batts_cost_power = cellfun(@(x)(x.cost_power) * ...
    x.cycle_life_used, obj.batts);
batts_cost_error = cellfun(@(x)x.cost_error, obj.batts);

% Costs from the grid ($)
grid_cost = -sum(obj.curtailed(obj.curtailed<0)) / ...
     n_years * obj.GRID_COSTS;

% Calculate LCOE
LCOE_parts = [ (demand_inv)*[...
        (gens_cost) ...
        (batts_cost_energy) ...
        (batts_cost_power) ...
        (batts_cost_error) ] ...
    grid_cost ];
LCOE_parts_names = [cellfun(@(x)sprintf('%s',x.NAME), obj.gens, ...
        'UniformOutput',false) ...
    cellfun(@(x)sprintf('Energy:%s',x.NAME), obj.batts, ...
        'UniformOutput',false) ...
    cellfun(@(x)sprintf('Power:%s',x.NAME), obj.batts, ...
        'UniformOutput',false) ...
    cellfun(@(x)sprintf('error:%s',x.NAME), obj.batts, ...
        'UniformOutput',false), ...
    {'grid'}];
LCOE = sum(LCOE_parts);

% Plot a pie chart of LCOE breakdown
if exist('do_plot','var') && do_plot
    figure('windowstyle','docked')
    pie( 100*LCOE_parts, ... % Multiply by 100 to get full pie chart
        ... Apply labels with each parts LCOE
        arrayfun( @(x,y)sprintf('%s: %.1f%s/kWh',...
                y{1}, x, char(0162) ), ...
            LCOE_parts*100, ...
            LCOE_parts_names, ...
            'UniformOutput',false));
    title(sprintf('%s: LCOE: %.1f %s/kWh', ...
        obj.NAME, LCOE*100, char(0162) ));
end


end

